# This is the name of your GitHub Actions workflow
name: Test and Deploy Website

# This section defines when the workflow will run
on:
  # Run this workflow every time you push to the 'main' branch
  push:
    branches:
      - main
  # We also want to run the 'test' job on Pull Requests
  pull_request:

# This section defines the 'jobs' to run.
jobs:
  # --- NEW TEST JOB ---
  test:
    # This job will run on all pushes and pull requests
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1
        with:
          # Scan all html and md files for links
          args: "--verbose ./**/*.html ./**/*.md"

  # --- MODIFIED DEPLOY JOB ---
  deploy:
    # This job now 'needs' (waits for) the 'test' job to complete successfully
    needs: test
    
    # CRITICAL: This 'if' condition ensures that deploy ONLY runs
    # on a push to the 'main' branch, not on pull requests.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    name: Deploy to Server
    runs-on: ubuntu-latest
    steps:
      # 1. Check out your repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Sync files to the NGINX server using rsync
      - name: Deploy to Server via rsync
        run: |
          # Create a file for the SSH private key from the GitHub secret
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
          chmod 600 deploy_key # Set correct, restrictive file permissions

          # Create an SSH config file to disable the 'StrictHostKeyChecking' prompt
          mkdir -p ~/.ssh
          echo "Host ${{ secrets.SSH_HOST }}" > ~/.ssh/config
          echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          
          # Run the rsync command
          DEST="${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/dennyspetworld.com/"
          rsync -avz --delete -e "ssh -i $(pwd)/deploy_key" "./" "$DEST"

      # 3. Set correct ownership AND permissions on the server
      - name: Set Permissions on Server
        run: |
          # Create the full SSH command
          # 1. Change owner to www-data (as before)
          # 2. Find all directories and set them to 755 (rwxr-xr-x)
          # 3. Find all files and set them to 644 (rw-r--r--)
          COMMAND="sudo chown -R www-data:www-data /var/www/dennyspetworld.com; \
                   sudo find /var/www/dennyspetworld.com -type d -exec chmod 755 {} \;; \
                   sudo find /var/www/dennyspetworld.com -type f -exec chmod 644 {} \;"
          
          # Execute the multi-line command on the server
          ssh -i $(pwd)/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "$COMMAND"